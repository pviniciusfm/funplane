// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.frg.tech/cloud/fanplane/pkg/apis/fanplane/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EnvoyBootstrapLister helps list EnvoyBootstraps.
type EnvoyBootstrapLister interface {
	// List lists all EnvoyBootstraps in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EnvoyBootstrap, err error)
	// EnvoyBootstraps returns an object that can list and get EnvoyBootstraps.
	EnvoyBootstraps(namespace string) EnvoyBootstrapNamespaceLister
	EnvoyBootstrapListerExpansion
}

// envoyBootstrapLister implements the EnvoyBootstrapLister interface.
type envoyBootstrapLister struct {
	indexer cache.Indexer
}

// NewEnvoyBootstrapLister returns a new EnvoyBootstrapLister.
func NewEnvoyBootstrapLister(indexer cache.Indexer) EnvoyBootstrapLister {
	return &envoyBootstrapLister{indexer: indexer}
}

// List lists all EnvoyBootstraps in the indexer.
func (s *envoyBootstrapLister) List(selector labels.Selector) (ret []*v1alpha1.EnvoyBootstrap, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvoyBootstrap))
	})
	return ret, err
}

// EnvoyBootstraps returns an object that can list and get EnvoyBootstraps.
func (s *envoyBootstrapLister) EnvoyBootstraps(namespace string) EnvoyBootstrapNamespaceLister {
	return envoyBootstrapNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EnvoyBootstrapNamespaceLister helps list and get EnvoyBootstraps.
type EnvoyBootstrapNamespaceLister interface {
	// List lists all EnvoyBootstraps in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EnvoyBootstrap, err error)
	// Get retrieves the EnvoyBootstrap from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EnvoyBootstrap, error)
	EnvoyBootstrapNamespaceListerExpansion
}

// envoyBootstrapNamespaceLister implements the EnvoyBootstrapNamespaceLister
// interface.
type envoyBootstrapNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EnvoyBootstraps in the indexer for a given namespace.
func (s envoyBootstrapNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EnvoyBootstrap, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EnvoyBootstrap))
	})
	return ret, err
}

// Get retrieves the EnvoyBootstrap from the indexer for a given namespace and name.
func (s envoyBootstrapNamespaceLister) Get(name string) (*v1alpha1.EnvoyBootstrap, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("envoybootstrap"), name)
	}
	return obj.(*v1alpha1.EnvoyBootstrap), nil
}
